@page
@model IndexModel
@{
    ViewData["Title"] = "Search and Sort Page";
}

<link rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"
      crossorigin="anonymous">

<div class="accordion" id="accordionExample">
    <!-- Data Source 1 -->
    <div class="accordion-item">
        <h2 class="accordion-header">
            <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                Data Source 1
            </button>
        </h2>
        <div id="collapseOne" class="accordion-collapse collapse show" data-bs-parent="#accordionExample">
            <div class="accordion-body">
                <div class="container">
                    <div class="card shadow-sm">
                        <div class="card-header text-white" style="background-color:#16253f">
                            <h3 class="mb-0">Search Company Details</h3>
                        </div>
                        <div class="card-body">
                            <form id="searchForm_1" class="row gx-3 gy-2 align-items-center">
                                <div class="col-sm-10">
                                    <label for="SearchTerm_1" class="visually-hidden">Search</label>
                                    <input type="text" id="SearchTerm_1" name="searchTerm_1" class="form-control" placeholder="Enter search term...">
                                </div>
                                <div class="col-sm-2 d-grid">
                                    <button type="submit" class="btn" style="background-color:#16253f;color:#fff">Search</button>
                                </div>
                            </form>
                        </div>
                    </div>
                    <div id="resultsContainer_1" class="mt-4"></div>
                </div>
            </div>
        </div>
    </div>

    <!-- Data Source 2 (hidden) -->
    <div class="accordion-item" style="visibility:hidden;display:none">
        <h2 class="accordion-header">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                Data Source 2
            </button>
        </h2>
        <div id="collapseTwo" class="accordion-collapse collapse" data-bs-parent="#accordionExample">
            <div class="accordion-body">
                <div class="container">
                    <div class="card shadow-sm">
                        <div class="card-header text-white" style="background-color:#16253f">
                            <h3 class="mb-0">Search Company Details</h3>
                        </div>
                        <div class="card-body">
                            <form id="searchForm_2" class="row gx-3 gy-2 align-items-center">
                                <div class="col-sm-10">
                                    <label for="SearchTerm_2" class="visually-hidden">Search</label>
                                    <input type="text" id="SearchTerm_2" name="searchTerm_2" class="form-control" placeholder="Enter search term...">
                                </div>
                                <div class="col-sm-2 d-grid">
                                    <button type="submit" class="btn" style="background-color:#16253f;color:#fff">Search</button>
                                </div>
                            </form>
                        </div>
                    </div>
                    <div id="resultsContainer_2" class="mt-4"></div>
                </div>
            </div>
        </div>
    </div>

    <!-- Data Source 2 (Lex Machina) -->
    <div class="accordion-item">
        <h2 class="accordion-header">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseFour" aria-expanded="false" aria-controls="collapseFour">
                Data Source 2
            </button>
        </h2>
        <div id="collapseFour" class="accordion-collapse collapse" data-bs-parent="#accordionExample">
            <div class="accordion-body">
                <div class="container">
                    <div class="card shadow-sm">
                        <div class="card-header text-white" style="background-color:#16253f">
                            <h3 class="mb-0">Search Lex Machina Details</h3>
                        </div>
                        <div class="card-body">
                            <form id="searchForm_4" class="row gx-3 gy-2 align-items-center">
                                <div class="col-sm-10">
                                    <label for="SearchTerm_4" class="visually-hidden">Search</label>
                                    <input type="text" id="SearchTerm_4" name="searchTerm_4" class="form-control" placeholder="Enter search term...">
                                </div>
                                <div class="col-sm-2 d-grid">
                                    <button type="submit" class="btn" style="background-color:#16253f;color:#fff">Search</button>
                                </div>
                            </form>
                        </div>
                    </div>
                    <div id="resultsContainer_4" class="mt-4"></div>
                </div>
            </div>
        </div>
    </div>

    <!-- Data Source 3 (CM) -->
    <div class="accordion-item">
        <h2 class="accordion-header">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
                Data Source 3
            </button>
        </h2>
        <div id="collapseThree" class="accordion-collapse collapse" data-bs-parent="#accordionExample">
            <div class="accordion-body">
                <div class="container">
                    <div class="card shadow-sm">
                        <div class="card-header text-white" style="background-color:#16253f">
                            <h3 class="mb-0">Search CM Details</h3>
                        </div>
                        <div class="card-body">
                            <form id="searchForm_5" class="row gx-3 gy-2 align-items-center">
                                <div class="col-sm-10">
                                    <label for="SearchTerm_5" class="visually-hidden">Search</label>
                                    <input type="text" id="SearchTerm_5" name="searchTerm_5" class="form-control" placeholder="Enter search term...">
                                </div>
                                <div class="col-sm-2 d-grid">
                                    <button type="submit" class="btn" style="background-color:#16253f;color:#fff">Search</button>
                                </div>
                            </form>
                        </div>
                    </div>
                    <div id="resultsContainer_3" class="mt-4"></div>
                </div>
            </div>
        </div>
    </div>

    <!-- Data Source 4 (Contacts) -->
    <div class="accordion-item">
        <h2 class="accordion-header">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseFive" aria-expanded="false" aria-controls="collapseFive">
                Data Source 4
            </button>
        </h2>
        <div id="collapseFive" class="accordion-collapse collapse" data-bs-parent="#accordionExample">
            <div class="accordion-body">
                <div class="container">
                    <div class="card shadow-sm">
                        <div class="card-header text-white" style="background-color:#16253f">
                            <h3 class="mb-0">Search Contact Details</h3>
                        </div>
                        <div class="card-body">
                            <form id="searchForm_6" class="row gx-3 gy-2 align-items-center">
                                <div class="col-sm-5">
                                    <input type="text" id="SearchFirstName" name="SearchFirstName" class="form-control" placeholder="Enter First Name...">
                                </div>
                                <div class="col-sm-5">
                                    <input type="text" id="SearchLastName" name="SearchLastName" class="form-control" placeholder="Enter Last Name...">
                                </div>
                                <div class="col-sm-1 d-grid">
                                    <button type="submit" class="btn" style="background-color:#16253f;color:#fff">Search</button>
                                </div>
                            </form>
                        </div>
                    </div>

                    <!-- Selected toolbar -->
                    <div class="d-flex align-items-center gap-2 my-2" id="selectedToolbar" style="display:none;">
                        <span class="badge bg-primary" id="selectedCountBadge">Selected (0)</span>
                        <button type="button" class="btn btn-sm btn-outline-primary" id="btnViewSelected">View Selected</button>
                        <button type="button" class="btn btn-sm btn-outline-secondary" id="btnClearSelected">Clear</button>
                    </div>

                    <div id="resultsContainer_6" class="mt-4"></div>
                </div>
            </div>
        </div>
    </div>

    <button type="button" class="btn btn-primary mt-2" id="storeButton" onclick="viewSelected()">Data Review / Submit</button>
</div>

<!-- Selected Modal -->
<div class="modal fade" id="selectedModal" aria-labelledby="selectedModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header" style="background-color:#16253f;color:#fff;">
                <h5 class="modal-title" id="selectedModalLabel">Selected Data</h5>
                <button type="button" class="btn-close" style="color:white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" style="max-height:80vh;overflow-y:auto;width:99%;margin:5px;border:1px solid var(--bs-modal-footer-border-color)">
                <div id="selectedDetails"></div>
            </div>
            <div class="modal-footer d-flex justify-content-end">
                <div class="d-flex align-items-center justify-content-end">
                    <button type="button" class="btn btn-primary me-2" id="submitButton">Submit</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Details Modal (unchanged for company detail flows) -->
<div class="modal fade" id="detailsModal" tabindex="-1" aria-labelledby="detailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header" style="background-color:#16253f;color:#fff;">
                <h5 class="modal-title" id="detailsModalLabel">Company Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <ul class="nav nav-tabs d-flex align-items-center" id="detailsTabs" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link active" id="details-tab" data-bs-toggle="tab" data-bs-target="#details" type="button" role="tab" aria-controls="details" aria-selected="true">Company Details</button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="professionals-tab" data-bs-toggle="tab" data-bs-target="#professionals" type="button" role="tab" aria-controls="professionals" aria-selected="false">Professionals</button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="transactions-tab" data-bs-toggle="tab" data-bs-target="#transactions" type="button" role="tab" aria-controls="transactions" aria-selected="false">Transactions</button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="dlapipercontacts-tab" data-bs-toggle="tab" data-bs-target="#dlapipercontacts" type="button" role="tab" aria-controls="transactions" aria-selected="false">DLA Piper/Interaction Contacts</button>
                    </li>
                </ul>
                <div class="tab-content" id="detailsTabsContent">
                    <div class="tab-pane fade show active" id="details" role="tabpanel" aria-labelledby="details-tab">
                        <div id="companyDetailsContent"></div>
                    </div>
                    <div class="tab-pane fade" id="professionals" role="tabpanel" aria-labelledby="professionals-tab">
                        <div id="professionalsContent"></div>
                    </div>
                    <div class="tab-pane fade" id="transactions" role="tabpanel" aria-labelledby="transactions-tab">
                        <div id="transactionsContent"></div>
                    </div>
                    <div class="tab-pane fade" id="dlapipercontacts" role="tabpanel" aria-labelledby="dlapipercontacts-tab">
                        <div id="dlapipercontactsContent"></div>
                    </div>
                </div>
            </div>
            <div class="modal-footer d-flex justify-content-between">
                <div class="d-flex align-items-center justify-content-start">
                    <label class="form-check-label me-3">
                        <input checked type="checkbox" class="form-check-input" id="chkCompanyDetails"> Company Details
                    </label>
                    <label class="form-check-label me-3">
                        <input checked type="checkbox" class="form-check-input" id="chkProfessionals"> Professionals
                    </label>
                    <label class="form-check-label me-3">
                        <input checked type="checkbox" class="form-check-input" id="chkTransactions"> Transactions
                    </label>
                    <label class="form-check-label">
                        <input checked type="checkbox" class="form-check-input" id="chkDLAPiper"> DLA Piper/Interaction Contacts
                    </label>
                </div>
                <div class="d-flex align-items-center justify-content-end">
                    <button type="button" class="btn btn-primary me-2" id="selectButton">Select</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Hidden fields -->
<input type="hidden" id="selectedCompanies" name="selectedCompanies" value="[]">
<input type="hidden" id="hdnSelectedCompanyName" />
<input type="hidden" id="hdnSelectedDataSource" />

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>

<script>
    /* ======================= Utilities ======================= */
    const escapeHtml = (s)=>String(s??'')
      .replace(/&/g,'&amp;').replace(/</g,'&lt;')
      .replace(/>/g,'&gt;').replace(/"/g,'&quot;')
      .replace(/'/g,'&#039;');

    function sortTable(columnIndex){
      const table=document.getElementById("resultsTable");
      if(!table) return;
      const tbody=table.tBodies[0];
      const rows=Array.from(tbody?.rows||[]);
      const currentOrder=table.dataset.sortOrder||"asc";
      const newOrder=currentOrder==="asc"?"desc":"asc";
      table.dataset.sortOrder=newOrder;

      const sorted=rows.sort((a,b)=>{
        const A=a.cells[columnIndex]?.innerText.trim()||"";
        const B=b.cells[columnIndex]?.innerText.trim()||"";
        const num=!isNaN(A)&&!isNaN(B);
        if(num){ return newOrder==="asc" ? (A-B) : (B-A); }
        return newOrder==="asc" ? A.localeCompare(B) : B.localeCompare(A);
      });
      tbody.append(...sorted);
    }

    const selField = () => document.getElementById('selectedCompanies');
    const getSelected = () => { try { return JSON.parse(selField().value || '[]'); } catch { return []; } };
    const setSelected = (arr) => selField().value = JSON.stringify(arr ?? []);

    const rowKey = (r) => `${r.company}|${r.clientMatterNumber}|${r.contactFirstName}|${r.contactLastName}`;

    function updateToolbar() {
      const list = getSelected();
      const badge = document.getElementById('selectedCountBadge');
      const bar   = document.getElementById('selectedToolbar');
      if (badge) badge.textContent = `Selected (${list.length})`;
      if (bar)   bar.style.display = list.length > 0 ? '' : 'none';
    }

    /* =================== Company Details bits (unchanged) =================== */
    function toReadableHeader(header){
      return header.replace(/_/g," ").replace(/IQ/g,"").replace(/TR/g,"").replace(/\b\w/g,c=>c.toUpperCase());
    }

    function viewDetails(companyName,datasource){
      try{
        const encodedCompanyName=encodeURIComponent(companyName);
        const h1=document.getElementById("hdnSelectedCompanyName"); if(h1) h1.value=companyName.replace(/'/g,"\\'");
        const h2=document.getElementById("hdnSelectedDataSource"); if(h2) h2.value=datasource;

        fetch(`/api/CompanyDetails/GetCompanyDetails?companyName=${encodedCompanyName}`)
          .then(r=>{ if(!r.ok) throw new Error('HTTP '+r.status); return r.json(); })
          .then(data=>{ populateModal(data,datasource,false,false,false,false,false); })
          .catch(err=>{ console.error(err); alert('No Details Found.'); });
      }catch(e){ console.error(e); alert('Unexpected error.'); }
    }

    function populateModal(data,datasource,review,includeCompanyDetails,includeProfessionals,includeTransactions,includeDLAPiperContacts){
      const companyDetailsContent=document.getElementById("companyDetailsContent");
      const professionalsContent=document.getElementById("professionalsContent");
      const transactionsContent=document.getElementById("transactionsContent");
      const dlapipercontactsContent=document.getElementById("dlapipercontactsContent");
      const selectedContent=document.getElementById("selectedDetails");

      companyDetailsContent.innerHTML=""; professionalsContent.innerHTML=""; transactionsContent.innerHTML=""; dlapipercontactsContent.innerHTML="";

      const detail1Data=data.detail1Data||[];
      const transactionData=data.transactionData||[];
      const professionalData=[]; const professionalTitles=[];

      detail1Data.forEach(item=>{
        const headers=item.headers||[]; const values=item.values||[];
        if(headers.includes("IQ_PROFESSIONAL")) professionalData.push(...values);
        else if(headers.includes("IQ_PROFESSIONAL_TITLE")) professionalTitles.push(...values);
        else if(values.length>0){
          const label=headers.map(toReadableHeader).join(", ");
          const value=values.flat().join("<br>");
          companyDetailsContent.innerHTML += `<div class="mb-3 mt-1"><strong style="color:#16253f;">${label}:</strong><p style="margin:0;color:#555;">${value}</p></div>`;
        }
      });

      if(professionalData.length>0 && professionalTitles.length>0){
        const tableContent = `
          <div class="table-responsive mt-1">
            <table class="table table-bordered table-striped">
              <thead class="table-dark"><tr><th>Title</th><th>Person</th></tr></thead>
              <tbody>
                ${professionalData.map((person,i)=>{
                     const title=professionalTitles[i]?.[0]||"Unknown Title";
                     const name=person[0]||"Unknown Person";
                     return `<tr><td>${title}</td><td>${name}</td></tr>`;
                   }).join("")}
              </tbody>
            </table>
          </div>`;
        professionalsContent.innerHTML=tableContent;
      }

      const DLAPipertableContent = `
        <div class="table-responsive mt-1">
          <table class="table table-bordered table-striped">
            <thead class="table-dark">
              <tr><th>Company</th><th>C/M Num</th><th>COMPANY CONTACT</th><th>DLA Piper CONTACT</th><th>dlapiper identity</th></tr>
            </thead>
            <tbody>
              <tr><td>Doctor's Associates Inc.</td><td>300243</td><td>Chidsey, John</td><td>CHIDSEY,JOHN</td><td>jchidsey@doctorassociatesinc.com</td></tr>
              <tr><td>Doctor's Associates Inc.</td><td>300263</td><td>Buck, Peter</td><td>BUCK,PETER</td><td>pbuck@doctorassociatesinc.com</td></tr>
              <tr><td>Doctor's Associates Inc.</td><td>34256</td><td>Shepherd, Jeffrey</td><td>SHEPHERD,JEFFREY</td><td>jshepherd@doctorassociatesinc.com</td></tr>
              <tr><td>Doctor's Associates Inc.</td><td>1233</td><td>Kappitt, Michael</td><td>KAPPITT,MICHAEL</td><td>mkappitt@doctorassociatesinc.com</td></tr>
              <tr><td>Doctor's Associates Inc.</td><td>2874</td><td>Van Hout, Thys</td><td>VAN HOUT,THYS</td><td>tvanhout@doctorassociatesinc.com</td></tr>
              <tr><td>Doctor's Associates Inc.</td><td>98345</td><td>Herlihy, Donagh</td><td>HERLIHY,DONAGH</td><td>dherlihy@doctorassociatesinc.com</td></tr>
              <tr><td>Doctor's Associates Inc.</td><td>345724</td><td>Kobert, Liene</td><td>KOBERT,LIENE</td><td>lkobert@doctorassociatesinc.com</td></tr>
              <tr><td>Doctor's Associates Inc.</td><td>90893</td><td>Christou, Lom</td><td>CHRISTOU,LOM</td><td>lchristou@doctorassociatesinc.com</td></tr>
              <tr><td>Doctor's Associates Inc.</td><td>45352</td><td>Rafferty, Steve</td><td>RAFFERTY,STEVE</td><td>srafferty@doctorassociatesinc.com</td></tr>
              <tr><td>Doctor's Associates Inc.</td><td>34523</td><td>Walsh, Carrie</td><td>WALSH,CARRIE</td><td>cwalsh@doctorassociatesinc.com</td></tr>
            </tbody>
          </table>
        </div>`;
      dlapipercontactsContent.innerHTML=DLAPipertableContent;

      transactionData.forEach(item=>{
        const headers=item.headers||[]; const values=item.values||[];
        const label=headers.map(toReadableHeader).join(", ");
        const value=values.flat().join("<br>");
        transactionsContent.innerHTML += `<div class="mb-3"><strong style="color:#16253f;">${label}:</strong><p style="margin:0;color:#555;">${value}</p></div>`;
      });

      if(review){
        selectedContent.innerHTML += `
          <hr style="border:1px solid black;">
          <div class="mb-3"><strong style="color:#16253f;">DATA SOURCE:</strong><p style="margin:0;color:#555;">${datasource}</p></div>`;
        if(includeCompanyDetails && companyDetailsContent){ selectedContent.innerHTML += companyDetailsContent.innerHTML+"<br>"; }
        if(includeProfessionals && professionalsContent){ selectedContent.innerHTML += professionalsContent.innerHTML+"<br>"; }
        if(includeTransactions && transactionsContent){ selectedContent.innerHTML += transactionsContent.innerHTML+"<br>"; }
        if(includeDLAPiperContacts && dlapipercontactsContent){ selectedContent.innerHTML += dlapipercontactsContent.innerHTML+"<br>"; }
      }else{
        ['chkCompanyDetails','chkProfessionals','chkTransactions','chkDLAPiper'].forEach(id=>{ const el=document.getElementById(id); if(el) el.checked=true; });
        const detailsModalElement=document.getElementById("detailsModal");
        if(detailsModalElement){ const detailsModal=new bootstrap.Modal(detailsModalElement); detailsModal.show(); }
      }
    }

        function viewSelected() {
      // pull selection
      const hiddenField = document.getElementById('selectedCompanies');
      let selectedCompanies = [];
      try {
        selectedCompanies = JSON.parse(hiddenField.value || "[]");
      } catch (err) {
        console.error("Error parsing JSON:", err);
        alert("Invalid data in selected companies.");
        return;
      }

      const selectedContent = document.getElementById('selectedDetails');
      selectedContent.innerHTML = "";

      // nothing selected
      if (!Array.isArray(selectedCompanies) || selectedCompanies.length === 0) {
        selectedContent.innerHTML = `<div class="alert alert-warning my-2">Nothing selected.</div>`;
        bootstrap.Modal.getOrCreateInstance(document.getElementById("selectedModal")).show();
        return;
      }

      // helper (use your global escapeHtml if available)
      const esc = (s) => String(s ?? '')
          .replace(/&/g,'&amp;').replace(/</g,'&lt;')
          .replace(/>/g,'&gt;').replace(/"/g,'&quot;')
          .replace(/'/g,'&#039;');

      // 1) Render any cached rows immediately (no API)
      const cachedRows = selectedCompanies.map(x => x.RowData).filter(Boolean);

      if (cachedRows.length > 0) {
        let html = `
          <h5 class="mb-2">Selected Contacts</h5>
          <div class="table-responsive">
            <table class="table table-bordered table-striped">
              <thead class="table-dark">
                <tr>
                  <th>Company</th>
                  <th>Client Matter Number</th>
                  <th>Contact First Name</th>
                  <th>Contact Last Name</th>
                  <th>DLA First Name</th>
                  <th>DLA Last Name</th>
                  <th>DLA Contact Identity</th>
                </tr>
              </thead>
              <tbody>`;
        cachedRows.forEach(r => {
          html += `
            <tr>
              <td>${esc(r.company)}</td>
              <td>${esc(r.clientMatterNumber)}</td>
              <td>${esc(r.contactFirstName)}</td>
              <td>${esc(r.contactLastName)}</td>
              <td>${esc(r.dlaFirstName)}</td>
              <td>${esc(r.dlaLastName)}</td>
              <td>${esc(r.dlaContactIdentity)}</td>
            </tr>`;
        });
        html += `</tbody></table></div>`;
        selectedContent.innerHTML += html;
      }

      // show the modal right away
      const selectedModal = bootstrap.Modal.getOrCreateInstance(document.getElementById("selectedModal"));
      selectedModal.show();

      // 2) For selections without cached RowData, fetch details and append via populateModal(...)
      const missing = selectedCompanies.filter(x => !x.RowData);
      if (missing.length === 0) return; // we’re done

      // Add a section header for fetched details (will fill in as they arrive)
      selectedContent.innerHTML += `<hr class="my-3"><h5 class="mb-2">Detailed Sections</h5>`;

      // fetch each missing company and append
      Promise.allSettled(missing.map(company => {
        const encodedCompanyName = encodeURIComponent(company.CompanyName.replace(/\\'/g, "'"));
        return fetch(`/api/CompanyDetails/GetCompanyDetails?companyName=${encodedCompanyName}`)
          .then(response => {
            if (!response.ok) throw new Error(`HTTP ${response.status}`);
            return response.json();
          })
          .then(data => {
            // Append rich blocks using your existing renderer
            // Note: include DLAPiperContacts if your object has it; default true to be safe
            const includeDLAP = company.DLAPiperContacts ?? true;
            populateModal(
              data,
              company.DataSource,
              /*review*/ true,
              company.CompanyDetails,
              company.Professionals,
              company.Transactions,
              includeDLAP
            );
          })
          .catch(err => {
            console.error('Error fetching details:', err);
            // append a non-blocking warning inline
            selectedContent.innerHTML += `
              <div class="alert alert-warning my-2">
                No details found for: <strong>${esc(company.CompanyName)}</strong>
              </div>`;
          });
      }))
      .catch(err => {
        // Shouldn't happen often, but guard anyway
        console.error('Unexpected error resolving detail fetches:', err);
      });
    }

</script>

<script>
    /* =================== Data Source 1 =================== */
    document.getElementById('searchForm_1').addEventListener('submit',function(e){
      e.preventDefault();
      const term=document.getElementById('SearchTerm_1').value;
      if(!term.trim()){ alert("Please enter a search term."); return; }
      fetch("api/CompanyDetails/GetDataSourceSearch1?searchTerm="+encodeURIComponent(term))
        .then(r=>{ if(!r.ok) throw new Error('No results found or an error occurred.'); return r.json(); })
        .then(data=>{
          if(!Array.isArray(data)||data.length===0){
            document.getElementById('resultsContainer_1').innerHTML=`<div class="alert alert-warning mt-4">No results found for "<strong>${escapeHtml(term)}</strong>".</div>`;
            return;
          }
          let html=`
            <h4>Search Results</h4>
            <table class="table table-striped table-bordered table-hover mt-3">
              <thead style="background-color:#16253f;color:#fff">
                <tr><th>ID</th><th>Company Name</th><th>Details</th></tr>
              </thead><tbody>`;
          data.forEach(item=>{
            html+=`<tr>
                <td>${escapeHtml(item.id)}</td>
                <td>${escapeHtml(item.companyName)}</td>
                <td><button class="btn btn-info btn-sm" onclick="viewDetails('${String(item.companyName).replace(/'/g,"\\'")}','DataSource1')">View Details</button></td>
              </tr>`;
          });
          html+=`</tbody></table>`;
          document.getElementById('resultsContainer_1').innerHTML=html;
        })
        .catch(err=>{ document.getElementById('resultsContainer_1').innerHTML=`<div class="alert alert-danger mt-4">Error: ${escapeHtml(err.message)}</div>`; });
    });

    /* =================== Data Source 2 (hidden) =================== */
    document.getElementById('searchForm_2')?.addEventListener('submit',function(e){
      e.preventDefault();
      const term=document.getElementById('SearchTerm_2').value;
      if(!term.trim()){ alert("Please enter a search term."); return; }
      fetch("api/CompanyDetails/GetDataSourceSearch2?searchTerm="+encodeURIComponent(term))
        .then(r=>{ if(!r.ok) throw new Error('No results found or an error occurred.'); return r.json(); })
        .then(data=>{
          if(!Array.isArray(data)||data.length===0){
            document.getElementById('resultsContainer_2').innerHTML=`<div class="alert alert-warning mt-4">No results found for "<strong>${escapeHtml(term)}</strong>".</div>`;
            return;
          }
          let html=`
            <h4>Search Results</h4>
            <table class="table table-striped table-bordered table-hover mt-3">
              <thead style="background-color:#16253f;color:#fff">
                <tr><th>ID</th><th>Company Name</th><th>Details</th></tr>
              </thead><tbody>`;
          data.forEach(item=>{
            html+=`<tr>
                <td>${escapeHtml(item.id)}</td>
                <td>${escapeHtml(item.companyName)}</td>
                <td><button class="btn btn-info btn-sm" onclick="viewDetails('${String(item.companyName).replace(/'/g,"\\'")}','DataSource2')">View Details</button></td>
              </tr>`;
          });
          html+=`</tbody></table>`;
          document.getElementById('resultsContainer_2').innerHTML=html;
        })
        .catch(err=>{ document.getElementById('resultsContainer_2').innerHTML=`<div class="alert alert-danger mt-4">Error: ${escapeHtml(err.message)}</div>`; });
    });

    /* =================== Data Source 3 (CM) =================== */
    document.getElementById('searchForm_5').addEventListener('submit',function(e){
      e.preventDefault();
      const term=document.getElementById('SearchTerm_5').value;
      if(!term.trim()){ alert("Please enter a search term."); return; }
      fetch("api/CompanyDetails/GetDataSourceSearch5?searchTerm="+encodeURIComponent(term))
        .then(r=>{ if(!r.ok) throw new Error('No results found or an error occurred.'); return r.json(); })
        .then(data=>{
          if(!Array.isArray(data)||data.length===0){
            document.getElementById('resultsContainer_3').innerHTML=`<div class="alert alert-warning mt-4">No results found for "<strong>${escapeHtml(term)}</strong>".</div>`;
            return;
          }
          let html=`
            <h4>Search Results</h4>
            <table class="table table-striped table-bordered table-hover mt-3">
              <thead style="background-color:#16253f;color:#fff">
                <tr>
                  <th>Client Number</th><th>Client Name</th><th>Status</th><th>Open Date</th>
                </tr>
              </thead><tbody>`;
          data.forEach(item=>{
            html+=`<tr>
                <td>${escapeHtml(item.clientNumber)}</td>
                <td>${escapeHtml(item.clientName)}</td>
                <td>${escapeHtml(item.status)}</td>
                <td>${escapeHtml(item.openDate)}</td>
              </tr>`;
          });
          html+=`</tbody></table>`;
          document.getElementById('resultsContainer_3').innerHTML=html;
        })
        .catch(err=>{ document.getElementById('resultsContainer_3').innerHTML=`<div class="alert alert-danger mt-4">Error: ${escapeHtml(err.message)}</div>`; });
    });
</script>

<script>
    /* =================== Contacts (Data Source 4) =================== */
    (() => {
      const form = document.getElementById('searchForm_6');
      const resultsEl = document.getElementById('resultsContainer_6');

      // Bulk update guard
      let isBulkUpdating = false;

      function toggleRowSelection(checked, item) {
        let list = getSelected();
        const k = rowKey(item);
        const idx = list.findIndex(x => x._k === k);

        if (checked) {
          if (idx === -1) {
            list.push({
              _k: k,
              CompanyName: item.company,
              DataSource: 'DataSource4',
              RowData: item
            });
          }
        } else {
          if (idx !== -1) list.splice(idx, 1);
        }
        setSelected(list);
        if (!isBulkUpdating) {
          refreshHeaderCheckbox();
          updateToolbar();
        }
      }

      function refreshHeaderCheckbox() {
        const header = document.getElementById('selectAllContacts');
        if (!header) return;
        const rows = Array.from(document.querySelectorAll('#resultsTable tbody input.contact-row-check'));
        const total = rows.length;
        const checked = rows.filter(r => r.checked).length;
        header.checked = total > 0 && checked === total;
        header.indeterminate = checked > 0 && checked < total;
      }

      function buildTable(rows, title) {
        let html = `
          <h4>${escapeHtml(title)}</h4>
          <div class="table-responsive">
            <table id="resultsTable" class="table table-striped table-bordered table-hover mt-3">
              <thead style="background-color:#16253f;color:#fff">
                <tr>
                  <th style="width:42px;text-align:center">
                    <input type="checkbox" id="selectAllContacts" title="Select All">
                  </th>
                  <th scope="col" onclick="sortTable(1)" style="cursor:pointer">Company</th>
                  <th scope="col" onclick="sortTable(2)" style="cursor:pointer">Client Matter Number</th>
                  <th scope="col" onclick="sortTable(3)" style="cursor:pointer">Contact First Name</th>
                  <th scope="col" onclick="sortTable(4)" style="cursor:pointer">Contact Last Name</th>
                  <th scope="col" onclick="sortTable(5)" style="cursor:pointer">DLA First Name</th>
                  <th scope="col" onclick="sortTable(6)" style="cursor:pointer">DLA Last Name</th>
                  <th scope="col" onclick="sortTable(7)" style="cursor:pointer">DLA Contact Identity</th>
                </tr>
              </thead>
              <tbody>`;

        rows.forEach((r, idx) => {
          html += `
            <tr>
              <td style="text-align:center;vertical-align:middle">
                <input type="checkbox" class="form-check-input contact-row-check" data-id="${idx}">
              </td>
              <td>${escapeHtml(r.company)}</td>
              <td>${escapeHtml(r.clientMatterNumber)}</td>
              <td>${escapeHtml(r.contactFirstName)}</td>
              <td>${escapeHtml(r.contactLastName)}</td>
              <td>${escapeHtml(r.dlaFirstName)}</td>
              <td>${escapeHtml(r.dlaLastName)}</td>
              <td>${escapeHtml(r.dlaContactIdentity)}</td>
            </tr>`;
        });

        html += `</tbody></table></div>`;
        return html;
      }

      function wireTable(rows) {
        const header = document.getElementById('selectAllContacts');
        const rowCbs = Array.from(document.querySelectorAll('#resultsTable tbody input.contact-row-check'));

        // restore checks from hidden
        const selected = getSelected();
        rowCbs.forEach((cb, i) => {
          const r = rows[i];
          const k = rowKey(r);
          cb.checked = selected.some(x => x._k === k);
        });

        // header: select/unselect all with bulk guard
        header.addEventListener('change', () => {
          isBulkUpdating = true;
          rowCbs.forEach((cb, i) => {
            if (cb.checked !== header.checked) {
              cb.checked = header.checked;
              toggleRowSelection(cb.checked, rows[i]);
            }
          });
          isBulkUpdating = false;
          header.indeterminate = false;
          refreshHeaderCheckbox();
          updateToolbar();
        });

        // rows: individual change
        rowCbs.forEach((cb, i) => {
          cb.addEventListener('change', () => {
            toggleRowSelection(cb.checked, rows[i]);
            refreshHeaderCheckbox();
            updateToolbar();
          });
        });

        refreshHeaderCheckbox();
        updateToolbar();
      }

      form.addEventListener('submit', async (e) => {
        e.preventDefault();

        const firstName = document.getElementById('SearchFirstName')?.value?.trim() || '';
        const lastName  = document.getElementById('SearchLastName')?.value?.trim() || '';

        try {
          const resp = (firstName || lastName)
            ? await fetch('api/CompanyDetails/GetDataSourceSearch6', {
                method: 'POST',
                headers: { 'Accept':'application/json', 'Content-Type':'application/json' },
                body: JSON.stringify({ firstName, lastName })
              })
            : await fetch('api/CompanyDetails/GetAllDataSourceSearch6', { headers:{ 'Accept':'application/json' } });

          if (!resp.ok) {
            const msg = await resp.text().catch(() => 'No results found or an error occurred.');
            throw new Error(msg || 'No results found or an error occurred.');
          }

          const data = await resp.json();
          if (!Array.isArray(data) || data.length === 0) {
            resultsEl.innerHTML = `<div class="alert alert-warning mt-3">No results found.</div>`;
            return;
          }

          // cache (optional)
          window.contactCache = data;

          resultsEl.innerHTML = buildTable(data, firstName || lastName ? 'Search Results' : 'All Contacts');
          wireTable(data);
        } catch (err) {
          resultsEl.innerHTML = `<div class="alert alert-danger mt-3">Error: ${escapeHtml(err.message)}</div>`;
        }
      });

      // Toolbar actions
      document.getElementById('btnViewSelected')?.addEventListener('click', viewSelected);
      document.getElementById('btnClearSelected')?.addEventListener('click', () => {
        setSelected([]);
        updateToolbar();
        // Uncheck visible rows if table exists
        document.querySelectorAll('#resultsTable tbody input.contact-row-check').forEach(cb => cb.checked = false);
        const header = document.getElementById('selectAllContacts');
        if (header) { header.checked = false; header.indeterminate = false; }
      });
    })();
</script>

<script>
    /* =================== Store submit =================== */
    document.getElementById("submitButton").addEventListener("click", function (){
      const title=prompt("Enter a title for this data:");
      if(!title||title.trim()===""){ alert("Title is required to store the data."); return; }

      let selectedCompanies=getSelected();
      const payload={ title:title.trim(), details: JSON.stringify(selectedCompanies) };

      fetch("/api/CompanyDetails/StoreCompanyDetails",{
        method:"POST",
        headers:{ "Content-Type":"application/json" },
        body:JSON.stringify(payload)
      })
      .then(r=>{ if(!r.ok) throw new Error('HTTP '+r.status); return r.json(); })
      .then(()=>{ alert("Data stored successfully!"); const m=document.getElementById('selectedModal'); if(m) bootstrap.Modal.getOrCreateInstance(m).hide(); })
      .catch(err=>{ console.error(err); alert("An error occurred while storing the data."); });
    });

    /* If you still use Select in details modal for non-contacts flows */
    document.getElementById("selectButton").addEventListener("click", function (){
      const companyNameElement=document.getElementById("hdnSelectedCompanyName").value;
      const dataSourceElement=document.getElementById("hdnSelectedDataSource").value;

      let selectedCompanies=getSelected();
      selectedCompanies=selectedCompanies.filter(c=>!(c.CompanyName===companyNameElement && c.DataSource===dataSourceElement));

      const newCompany={
        "CompanyName": companyNameElement,
        "DataSource": dataSourceElement,
        "CompanyDetails": document.getElementById('chkCompanyDetails').checked,
        "Professionals": document.getElementById('chkProfessionals').checked,
        "Transactions": document.getElementById('chkTransactions').checked,
        "DLAPiperContacts": document.getElementById('chkDLAPiper').checked
      };
      selectedCompanies.push(newCompany);
      setSelected(selectedCompanies);

      const modalEl=document.getElementById('detailsModal');
      if(modalEl) bootstrap.Modal.getOrCreateInstance(modalEl).hide();
    });
</script>

<style>
    .table-striped tbody tr:nth-of-type(odd) {
        background-color: #E0E0E0 !important;
    }

    .table-striped tbody tr:hover {
        background-color: #d6d6d6 !important;
    }

    .modal-header {
        background-color: #16253f;
        color: #fff;
    }

    .table th, .table td {
        vertical-align: middle;
        text-align: left;
    }

    strong {
        font-size: 1rem;
    }

    p {
        font-size: 0.95rem;
        color: #555;
    }

    .table th {
        background-color: #16253f !important;
        color: #fff;
    }

    .nav-tabs .form-check-input {
        margin-top: 5px;
        margin-left: 10px;
    }
</style>
