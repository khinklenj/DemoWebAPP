@page
@model IndexModel
@{
    ViewData["Title"] = "Search and Sort Page";
}

<!-- Include Bootstrap CSS -->
<link rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"
      integrity="sha384-QWTK6xHjE+8qN/79z9YPH7ORz6CgFA6+9Y0G5pMDC/U/"
      crossorigin="anonymous">

<div class="accordion" id="accordionExample">
    <div class="accordion-item">
        <h2 class="accordion-header">
            <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                Data Source 1
            </button>
        </h2>
        <div id="collapseOne" class="accordion-collapse collapse show" data-bs-parent="#accordionExample">
            <div class="accordion-body">
                <div class="container">
                    <!-- Card with Search Form -->
                    <div class="card shadow-sm">
                        <div class="card-header text-white" style="background-color: #16253f">
                            <h3 class="mb-0">Search Company Details</h3>
                        </div>
                        <div class="card-body">
                            <form id="searchForm_1" method="get" class="row gx-3 gy-2 align-items-center">
                                <div class="col-sm-10">
                                    <label for="SearchTerm_1" class="visually-hidden">Search</label>
                                    <input type="text" id="SearchTerm_1" name="searchTerm_1" class="form-control"
                                           placeholder="Enter search term...">
                                </div>
                                <div class="col-sm-2 d-grid">
                                    <button type="submit" class="btn" style="background-color: #16253f; color: white">Search</button>
                                </div>
                            </form>
                        </div>
                    </div>
                    <div id="resultsContainer_1" class="mt-4"></div>
                </div>
            </div>
        </div>
    </div>
    <div class="accordion-item" style="visibility:hidden; display:none">
        <h2 class="accordion-header">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                Data Source 2
            </button>
        </h2>
        <div id="collapseTwo" class="accordion-collapse collapse" data-bs-parent="#accordionExample">
            <div class="accordion-body">
                <div class="container">
                    <!-- Card with Search Form -->
                    <div class="card shadow-sm">
                        <div class="card-header text-white" style="background-color: #16253f">
                            <h3 class="mb-0">Search Company Details</h3>
                        </div>
                        <div class="card-body">
                            <form id="searchForm_2" method="get" class="row gx-3 gy-2 align-items-center">
                                <div class="col-sm-10">
                                    <label for="SearchTerm_2" class="visually-hidden">Search</label>
                                    <input type="text" id="SearchTerm_2" name="searchTerm_2" class="form-control"
                                           placeholder="Enter search term...">
                                </div>
                                <div class="col-sm-2 d-grid">
                                    <button type="submit" class="btn" style="background-color: #16253f; color: white">Search</button>
                                </div>
                            </form>
                        </div>
                    </div>
                    <div id="resultsContainer_2" class="mt-4"></div>
                </div>
            </div>
        </div>
    </div>
    <div class="accordion-item">
        <h2 class="accordion-header">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseFour" aria-expanded="false" aria-controls="collapseThree">
                Data Source 2
            </button>
        </h2>
        <div id="collapseFour" class="accordion-collapse collapse" data-bs-parent="#accordionExample">
            <div class="accordion-body">
                <div class="container">
                    <!-- Card with Search Form -->
                    <div class="card shadow-sm">
                        <div class="card-header text-white" style="background-color: #16253f">
                            <h3 class="mb-0">Search Lex Machina Details</h3>
                        </div>
                        <div class="card-body">
                            <form id="searchForm_4" method="get" class="row gx-3 gy-2 align-items-center">
                                <div class="col-sm-10">
                                    <label for="SearchTerm_4" class="visually-hidden">Search</label>
                                    <input type="text" id="SearchTerm_4" name="searchTerm_4" class="form-control"
                                           placeholder="Enter search term...">
                                </div>
                                <div class="col-sm-2 d-grid">
                                    <button type="submit" class="btn" style="background-color: #16253f; color: white">Search</button>
                                </div>
                            </form>
                        </div>
                    </div>
                    <div id="resultsContainer_4" class="mt-4"></div>
                </div>
            </div>
        </div>
    </div>
    <div class="accordion-item">
        <h2 class="accordion-header">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
                Data Source 3
            </button>
        </h2>
        <div id="collapseThree" class="accordion-collapse collapse" data-bs-parent="#accordionExample">
            <div class="accordion-body">
                <div class="container">
                    <!-- Card with Search Form -->
                    <div class="card shadow-sm">
                        <div class="card-header text-white" style="background-color: #16253f">
                            <h3 class="mb-0">Search CM Details</h3>
                        </div>
                        <div class="card-body">
                            <form id="searchForm_5" method="get" class="row gx-3 gy-2 align-items-center">
                                <div class="col-sm-10">
                                    <label for="SearchTerm_5" class="visually-hidden">Search</label>
                                    <input type="text" id="SearchTerm_5" name="searchTerm_5" class="form-control"
                                           placeholder="Enter search term...">
                                </div>
                                <div class="col-sm-2 d-grid">
                                    <button type="submit" class="btn" style="background-color: #16253f; color: white">Search</button>
                                </div>
                            </form>
                        </div>
                    </div>
                    <div id="resultsContainer_3" class="mt-4"></div>
                </div>
            </div>
        </div>
    </div>

    <div class="accordion-item">
        <h2 class="accordion-header">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseFive" aria-expanded="false" aria-controls="collapseFive">
                Data Source 4
            </button>
        </h2>
        <div id="collapseFive" class="accordion-collapse collapse" data-bs-parent="#accordionExample">
            <div class="accordion-body">
                <div class="container">
                    <!-- Card with Search Form -->
                    <div class="card shadow-sm">
                        <div class="card-header text-white" style="background-color: #16253f">
                            <h3 class="mb-0">Search Contact Details</h3>
                        </div>
                        <div class="card-body">
                            <form id="searchForm_6" method="get" class="row gx-3 gy-2 align-items-center">
                                <div class="col-sm-5">
                                    <input type="text" id="SearchFirstName" name="SearchFirstName" class="form-control"
                                           placeholder="Enter First Name...">
                                    
                                </div>
                                <div class="col-sm-5">
                                <input type="text" id="SearchLastName" name="SearchLastName" class="form-control"
                                       placeholder="Enter Last Name...">
                                       </div>
                                <div class="col-sm-2 d-grid">
                                    <button type="submit" class="btn" style="background-color: #16253f; color: white">Search</button>
                                </div>
                            </form>
                        </div>
                    </div>
                    <div id="resultsContainer_6" class="mt-4"></div>
                </div>
            </div>
        </div>
    </div>


    <button type="button" class="btn btn-primary mt-2" id="storeButton" onclick="viewSelected()">Data Review / Submit</button>
</div>

<div class="modal fade" id="selectedModal" aria-labelledby="selectedModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <!-- Modal Header -->
            <div class="modal-header" style="background-color: #16253f; color: white;">
                <h5 class="modal-title" id="selectedModalLabel">Selected Data</h5>
                <button type="button" class="btn-close" style="color:white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <!-- Modal Body with Tabs -->
            <div class="modal-body" style="max-height: 80vh; overflow-y: auto; width: 99%; margin: 5px; border: 1px solid var(--bs-modal-footer-border-color)">
                <div id="selectedDetails"></div>
            </div>
            <!-- Modal Footer -->

            <div class="modal-footer d-flex justify-content-end">
                <div class="d-flex align-items-center justify-content-end">
                    <button type="button" class="btn btn-primary me-2" id="submitButton">Submit</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="detailsModal" tabindex="-1" aria-labelledby="detailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <!-- Modal Header -->
            <div class="modal-header" style="background-color: #16253f; color: white;">
                <h5 class="modal-title" id="detailsModalLabel">Company Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <!-- Modal Body with Tabs -->
            <div class="modal-body">
                <!-- Tabs Navigation -->
                <ul class="nav nav-tabs d-flex align-items-center" id="detailsTabs" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link active" id="details-tab" data-bs-toggle="tab" data-bs-target="#details" type="button" role="tab" aria-controls="details" aria-selected="true">Company Details</button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="professionals-tab" data-bs-toggle="tab" data-bs-target="#professionals" type="button" role="tab" aria-controls="professionals" aria-selected="false">Professionals</button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="transactions-tab" data-bs-toggle="tab" data-bs-target="#transactions" type="button" role="tab" aria-controls="transactions" aria-selected="false">Transactions</button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="dlapipercontacts-tab" data-bs-toggle="tab" data-bs-target="#dlapipercontacts" type="button" role="tab" aria-controls="transactions" aria-selected="false">DLA Piper/Interaction Contacts</button>
                    </li>
                </ul>
                <!-- Tabs Content -->
                <div class="tab-content" id="detailsTabsContent">
                    <div class="tab-pane fade show active" id="details" role="tabpanel" aria-labelledby="details-tab">
                        <div id="companyDetailsContent"></div>
                    </div>
                    <div class="tab-pane fade" id="professionals" role="tabpanel" aria-labelledby="professionals-tab">
                        <div id="professionalsContent"></div>
                    </div>
                    <div class="tab-pane fade" id="transactions" role="tabpanel" aria-labelledby="transactions-tab">
                        <div id="transactionsContent"></div>
                    </div>
                    <div class="tab-pane fade" id="dlapipercontacts" role="tabpanel" aria-labelledby="dlapipercontacts-tab">
                        <div id="dlapipercontactsContent"></div>
                    </div>
                </div>
            </div>
            <!-- Modal Footer -->

            <div class="modal-footer d-flex justify-content-between">
                <div class="d-flex align-items-center justify-content-start">
                    <label class="form-check-label me-3">
                        <input checked type="checkbox" class="form-check-input" id="chkCompanyDetails"> Company Details
                    </label>
                    <label class="form-check-label me-3">
                        <input checked type="checkbox" class="form-check-input" id="chkProfessionals"> Professionals
                    </label>
                    <label class="form-check-label">
                        <input checked type="checkbox" class="form-check-input" id="chkTransactions"> Transactions
                    </label>
                    <label class="form-check-label" style="margin-left: 10px;">
                        <input checked type="checkbox" class="form-check-input" id="chkDLAPiper">  DLA Piper/Interaction Contacts
                    </label>
                </div>
                <div class="d-flex align-items-center justify-content-end">
                    <button type="button" class="btn btn-primary me-2" id="selectButton">Select</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Hidden field to store JSON data -->
<input type="hidden" id="selectedCompanies" name="selectedCompanies" value="[]">

<input type="hidden" id="hdnSelectedCompanyName" />
<input type="hidden" id="hdnSelectedDataSource" />

<!-- Bootstrap and JS -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
<script>
    // Function to sort table columns
    function sortTable(columnIndex) {
        const table = document.getElementById("resultsTable");
        const tbody = table.tBodies[0];
        const rows = Array.from(tbody.rows);

        const currentOrder = table.dataset.sortOrder || "asc";
        const newOrder = currentOrder === "asc" ? "desc" : "asc";
        table.dataset.sortOrder = newOrder;

        const sortedRows = rows.sort((rowA, rowB) => {
            const cellA = rowA.cells[columnIndex].innerText.trim();
            const cellB = rowB.cells[columnIndex].innerText.trim();

            const isNumeric = !isNaN(cellA) && !isNaN(cellB);
            if (isNumeric) {
                return newOrder === "asc" ? cellA - cellB : cellB - cellA;
            } else {
                return newOrder === "asc"
                    ? cellA.localeCompare(cellB)
                    : cellB.localeCompare(cellA);
            }
        });

        tbody.append(...sortedRows);
    }

    // Function to fetch and display details in modal
    function viewDetails(companyName, datasource) {
        try {
            // Properly encode the company name for safe usage in a URL
            const encodedCompanyName = encodeURIComponent(companyName);
            
            // Optional: Store the selected company name in a hidden input if needed
            const hiddenCompanyNameField = document.getElementById("hdnSelectedCompanyName");
            if (hiddenCompanyNameField) {
                hiddenCompanyNameField.value = companyName.replace(/'/g, "\\'");
            }

            // Optional: Store the selected company name in a hidden input if needed
            const hiddenDataSourceField = document.getElementById("hdnSelectedDataSource");
            if (hiddenDataSourceField) {
                hiddenDataSourceField.value = datasource;
            }


            // Use template literal correctly in the fetch URL
            fetch(`/api/CompanyDetails/GetCompanyDetails?companyName=${encodedCompanyName}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    // Call the populateModal function with the fetched data
                    populateModal(data, datasource, false, false, false, false, false);
                })
                .catch(error => {
                    console.error('Error fetching details:', error);
                    alert('No Details Found.');
                });
        } catch (error) {
            console.error('Error in viewDetails function:', error);
            alert('An unexpected error occurred. Please try again.');
        }
    }

       function viewSelected() {
        let hiddenField = document.getElementById('selectedCompanies');

        let selectedCompanies;
        try {
            selectedCompanies = JSON.parse(hiddenField.value || "[]");
        } catch (error) {
            console.error("Error parsing JSON:", error);
            alert("Invalid data in selected companies.");
            return;
        }

        const selectedContent = document.getElementById("selectedDetails");
        selectedContent.innerHTML = "";

        // Loop through each selected company
        for (const company of selectedCompanies) {
            const encodedCompanyName = encodeURIComponent(company.CompanyName.replace(/\\'/g, "'"));

            fetch(`/api/CompanyDetails/GetCompanyDetails?companyName=${encodedCompanyName}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    // Call the populateModal function with the fetched data
                    populateModal(data, company.DataSource, true, company.CompanyDetails, company.Professionals, company.Transactions);
                })
                .catch(error => {
                    console.error('Error fetching details:', error);
                    alert(`No details found for: ${company.CompanyName}`);
                });
        }

        // Show the modal
        const selectedModal = new bootstrap.Modal(document.getElementById("selectedModal"));
        selectedModal.show();
    }



     function populateModal(data, datasource, review, includeCompanyDetails, includeProfessionals, includeTransactions, includeDLAPiperContacts) {
        const companyDetailsContent = document.getElementById("companyDetailsContent");
        const professionalsContent = document.getElementById("professionalsContent");
        const transactionsContent = document.getElementById("transactionsContent");
        const dlapipercontactsContent = document.getElementById("dlapipercontactsContent");
        const selectedContent = document.getElementById("selectedDetails");

        // Clear existing content
        companyDetailsContent.innerHTML = "";
        professionalsContent.innerHTML = "";
        transactionsContent.innerHTML = "";
        dlapipercontactsContent.innerHTML = "";

        // Extract detail1Data and transactionData arrays from the data object
        const detail1Data = data.detail1Data || [];
        const transactionData = data.transactionData || [];

        const professionalData = [];
        const professionalTitles = [];
        const dlapiperData = [];

        // Process detail1Data
        detail1Data.forEach((item) => {
            const headers = item.headers || [];
            const values = item.values || [];

            if (headers.includes("IQ_PROFESSIONAL")) {
                professionalData.push(...values);
            } else if (headers.includes("IQ_PROFESSIONAL_TITLE")) {
                professionalTitles.push(...values);
            } else if (values.length > 0) {
                const label = headers.map(toReadableHeader).join(", ");
                const value = values.flat().join("<br>");

                // Append to Company Details tab
                const content = `
                    <div class="mb-3 mt-1">
                        <strong style="color: #16253f;">${label}:</strong>
                        <p style="margin: 0; color: #555;">${value}</p>
                    </div>
                `;
                companyDetailsContent.innerHTML += content;
            }
        });

        // Render professional data and titles in a table if both exist
        if (professionalData.length > 0 && professionalTitles.length > 0) {
            const tableContent = `
                <div class="table-responsive mt-1">
                    <table class="table table-bordered table-striped">
                        <thead class="table-dark">
                            <tr>
                                <th>Title</th>
                                <th>Person</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${professionalData
                                .map((person, index) => {
                                    const title = professionalTitles[index]?.[0] || "Unknown Title";
                                    const personName = person[0] || "Unknown Person";
                                    return `
                                        <tr>
                                            <td>${title}</td>
                                            <td>${personName}</td>
                                        </tr>
                                    `;
                                })
                                .join("")}
                        </tbody>
                    </table>
                </div>
            `;
            professionalsContent.innerHTML = tableContent;
        }

        const DLAPipertableContent = `
                <div class="table-responsive mt-1">
                    <table class="table table-bordered table-striped">
                        <thead class="table-dark">
                            <tr>
                                <th>Company</th>
                                <th>C/M Num</th>
                                <th>COMPANY CONTACT</th>
                                <th>DLA Piper CONTACT</th>
                                <th>dlapiper identity</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>Doctor's Associates Inc.</td>
                                <td>300243</td>
                                <td>Chidsey, John</td>
                                <td>CHIDSEY,JOHN</td>
                                <td>jchidsey@doctorassociatesinc.com</td>
                            </tr>
                            <tr>
                                <td>Doctor's Associates Inc.</td>
                                <td>300263</td>
                                <td>Buck, Peter</td>
                                <td>BUCK,PETER</td>
                                <td>pbuck@doctorassociatesinc.com</td>
                            </tr>
                            <tr>
                                <td>Doctor's Associates Inc.</td>
                                <td>34256</td>
                                <td>Shepherd, Jeffrey</td>
                                <td>SHEPHERD,JEFFREY</td>
                                <td>jshepherd@doctorassociatesinc.com</td>
                            </tr>
                            <tr>
                                <td>Doctor's Associates Inc.</td>
                                <td>1233</td>
                                <td>Kappitt, Michael</td>
                                <td>KAPPITT,MICHAEL</td>
                                <td>mkappitt@doctorassociatesinc.com</td>
                            </tr>
                            <tr>
                                <td>Doctor's Associates Inc.</td>
                                <td>2874</td>
                                <td>Van Hout, Thys</td>
                                <td>VAN HOUT,THYS</td>
                                <td>tvanhout@doctorassociatesinc.com</td>
                            </tr>
                            <tr>
                                <td>Doctor's Associates Inc.</td>
                                <td>98345</td>
                                <td>Herlihy, Donagh</td>
                                <td>HERLIHY,DONAGH</td>
                                <td>dherlihy@doctorassociatesinc.com</td>
                            </tr>
                            <tr>
                                <td>Doctor's Associates Inc.</td>
                                <td>345724</td>
                                <td>Kobert, Liene</td>
                                <td>KOBERT,LIENE</td>
                                <td>lkobert@doctorassociatesinc.com</td>
                            </tr>
                            <tr>
                                <td>Doctor's Associates Inc.</td>
                                <td>90893</td>
                                <td>Christou, Lom</td>
                                <td>CHRISTOU,LOM</td>
                                <td>lchristou@doctorassociatesinc.com</td>
                            </tr>
                            <tr>
                                <td>Doctor's Associates Inc.</td>
                                <td>45352</td>
                                <td>Rafferty, Steve</td>
                                <td>RAFFERTY,STEVE</td>
                                <td>srafferty@doctorassociatesinc.com</td>
                            </tr>
                            <tr>
                                <td>Doctor's Associates Inc.</td>
                                <td>34523</td>
                                <td>Walsh, Carrie</td>
                                <td>WALSH,CARRIE</td>
                                <td>cwalsh@doctorassociatesinc.com</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            `;
            dlapipercontactsContent.innerHTML = DLAPipertableContent;

        // Process transactionData
        transactionData.forEach((item) => {
            const identifier = item.identifier || "Unknown Identifier";
            const headers = item.headers || [];
            const values = item.values || [];

            const label = headers.map(toReadableHeader).join(", ");
            const value = values.flat().join("<br>");

            // Append transaction details
            const content = `
                <div class="mb-3">
                    <strong style="color: #16253f;">${label}:</strong>
                    <p style="margin: 0; color: #555;">${value}</p>
                </div>
            `;
            transactionsContent.innerHTML += content;
        });

        if (review) {
            selectedContent.innerHTML += `
                <hr style="border: 1px solid black;">
                <div class="mb-3">
                    <strong style="color: #16253f;">DATA SOURCE:</strong>
                    <p style="margin: 0; color: #555;">${datasource}</p>
                </div>
        `;

        

        // Ensure elements exist before appending to avoid errors
        if (includeCompanyDetails && companyDetailsContent) {
            selectedContent.innerHTML += companyDetailsContent.innerHTML + "<br>";
        }

        if (includeProfessionals && professionalsContent) {
            selectedContent.innerHTML += professionalsContent.innerHTML + "<br>";
        }

        if (includeTransactions && transactionsContent) {
            selectedContent.innerHTML += transactionsContent.innerHTML + "<br>";
        }

        if (includeDLAPiperContacts && dlapipercontactsContent) {
            selectedContent.innerHTML += dlapipercontactsContent.innerHTML + "<br>";
        }
    } else {
        // Safely check elements before setting values
        let companyDetailsCheckbox = document.getElementById('chkCompanyDetails');
        let professionalsCheckbox = document.getElementById('chkProfessionals');
        let transactionsCheckbox = document.getElementById('chkTransactions');
        let dlapipercontactsCheckbox = document.getElementById('chkDLAPiper');

        if (companyDetailsCheckbox) companyDetailsCheckbox.checked = true;
        if (professionalsCheckbox) professionalsCheckbox.checked = true;
        if (transactionsCheckbox) transactionsCheckbox.checked = true;
        if (dlapipercontactsCheckbox) dlapipercontactsCheckbox.checked = true;

        // Show the modal
        const detailsModalElement = document.getElementById("detailsModal");
        if (detailsModalElement) {
            const detailsModal = new bootstrap.Modal(detailsModalElement);
            detailsModal.show();
        }
    }

    }

    // Utility function to format headers into readable labels
    function toReadableHeader(header) {
        return header
            .replace(/_/g, " ") // Replace underscores with spaces
            .replace(/IQ/g, "")
            .replace(/TR/g, "")
            .replace(/\b\w/g, (char) => char.toUpperCase()); // Capitalize each word
    }

    document.getElementById("submitButton").addEventListener("click", function () {
        // Prompt for a title
        const title = prompt("Enter a title for this data:");
        if (!title || title.trim() === "") {
            alert("Title is required to store the data.");
            return;
        }

        // // Get the selected company name
        // const companyNameElement = document.getElementById("hdnSelectedCompanyName");
        // if (!companyNameElement || !companyNameElement.value.trim()) {
        //     alert("Company name is required.");
        //     return;
        // }

        let hiddenField = document.getElementById('selectedCompanies');

        let selectedCompanies = JSON.parse(hiddenField.value || "[]");

        const dataToStore = {
            title: title.trim(),
            details: JSON.stringify(selectedCompanies)
        };

        // Debugging: Log data before making the request
        console.log("Data to store:", dataToStore);

        // Call the API to store data
        fetch("/api/CompanyDetails/StoreCompanyDetails", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(dataToStore),
        })
            .then((response) => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then((result) => {
                alert("Data stored successfully!");
                $('#selectedModal').modal('hide');
            })
            .catch((error) => {
                console.error("Error storing data:", error);
                alert("An error occurred while storing the data. Please try again.");
            });
    });

    document.getElementById("selectButton").addEventListener("click", function () {
        const companyNameElement = document.getElementById("hdnSelectedCompanyName").value;
        const dataSourceElement = document.getElementById("hdnSelectedDataSource").value;
        let hiddenField = document.getElementById('selectedCompanies');

        let selectedCompanies = JSON.parse(hiddenField.value || "[]");

        // Remove existing company entry if it matches the selected company and data source
        selectedCompanies = selectedCompanies.filter(company =>
            !(company.CompanyName === companyNameElement && company.DataSource === dataSourceElement)
        );

        // Add the new company to the list
        let newCompany = {
            "CompanyName": companyNameElement,
            "DataSource": dataSourceElement,
            "CompanyDetails": document.getElementById('chkCompanyDetails').checked,
            "Professionals": document.getElementById('chkProfessionals').checked,
            "Transactions": document.getElementById('chkTransactions').checked,
            "DLAPiperContacts": document.getElementById('chkDLAPiper').checked
        };

        selectedCompanies.push(newCompany);

        // Update hidden input field with updated JSON data
        hiddenField.value = JSON.stringify(selectedCompanies);

        // Close the modal
        $('#detailsModal').modal('hide');

        updateCheckboxStates();
    });

</script>

<script>
    document.getElementById('searchForm_1').addEventListener('submit', function (e) {
        e.preventDefault();

        var searchTerm = document.getElementById('SearchTerm_1').value;

        if (!searchTerm.trim()) {
            alert("Please enter a search term.");
            return;
        }

        fetch("api/CompanyDetails/GetDataSourceSearch1?searchTerm=" + searchTerm)
            .then(response => {
                if (!response.ok) {
                    throw new Error('No results found or an error occurred.');
                }
                return response.json();
            })
            .then(data => {
                if (data.length === 0) {
                    document.getElementById('resultsContainer_1').innerHTML = `
                        <div class="alert alert-warning mt-4">No results found for "<strong>${searchTerm}</strong>".</div>
                    `;
                    return;
                }

                // <th scope="col"></th>
                let tableHtml = `
                    <h4>Search Results</h4>
                    <table class="table table-striped table-bordered table-hover mt-3">
                        <thead style="background-color: #16253f; color: white">
                            <tr>
                                <th scope="col" onclick="sortTable(0)" style="cursor: pointer">ID</th>
                                <th scope="col" onclick="sortTable(1)" style="cursor: pointer">Company Name</th>
                                <th scope="col">Details</th>
                            </tr>
                        </thead>
                        <tbody>
                `;

                // <td class="text-center">
                //     <input type="checkbox" id="checkbox-${item.Id}" class="form-check-input" onclick="updateSelectedCompanies('${item.companyName.replace(/'/g, "\\'")}', 'DataSource1', this)"
                //     data-companyname="${item.companyName.replace(/'/g, "\\'")}"
                //     data-datasource="DataSource1">
                // </td>

                data.forEach((item, index) => {
                    tableHtml += `
                        <tr>
                            <td>${item.id}</td>
                            <td>${item.companyName}</td>
                            <td>
                                <button class="btn btn-info btn-sm" onclick="viewDetails('${item.companyName.replace(/'/g, "\\'")}','DataSource1')">
                                    View Details
                                </button>
                            </td>
                        </tr>`;
                });

                tableHtml += `
                        </tbody>
                    </table>
                `;

                document.getElementById('resultsContainer_1').innerHTML = tableHtml;
                updateCheckboxStates();
            })
            .catch(error => {
                document.getElementById('resultsContainer_1').innerHTML = `
                    <div class="alert alert-danger mt-4">Error: ${error.message}</div>
                `;
            });
    });
</script>

<script>
    document.getElementById('searchForm_2').addEventListener('submit', function (e) {
        e.preventDefault();

        var searchTerm = document.getElementById('SearchTerm_2').value;

        if (!searchTerm.trim()) {
            alert("Please enter a search term.");
            return;
        }

        fetch("api/CompanyDetails/GetDataSourceSearch2?searchTerm=" + searchTerm)
            .then(response => {
                if (!response.ok) {
                    throw new Error('No results found or an error occurred.');
                }
                return response.json();
            })
            .then(data => {
                if (data.length === 0) {
                    document.getElementById('resultsContainer_2').innerHTML = `
                        <div class="alert alert-warning mt-4">No results found for "<strong>${searchTerm}</strong>".</div>
                    `;
                    return;
                }

                let tableHtml = `
                    <h4>Search Results</h4>
                    <table class="table table-striped table-bordered table-hover mt-3">
                        <thead style="background-color: #16253f; color: white">
                            <tr>
                                <th scope="col" onclick="sortTable(0)" style="cursor: pointer">ID</th>
                                <th scope="col" onclick="sortTable(1)" style="cursor: pointer">Company Name</th>
                                <th scope="col">Details</th>
                            </tr>
                        </thead>
                        <tbody>
                `;

                data.forEach((item, index) => {
                    tableHtml += `
                        <tr>
                            <td>${item.id}</td>
                            <td>${item.companyName}</td>
                            <td>
                                <button class="btn btn-info btn-sm" onclick="viewDetails('${item.companyName.replace(/'/g, "\\'")}','DataSource2')">
                                    View Details
                                </button>
                            </td>
                        </tr>`;
                });

                tableHtml += `
                        </tbody>
                    </table>
                `;

                document.getElementById('resultsContainer_2').innerHTML = tableHtml;
                updateCheckboxStates();
            })
            .catch(error => {
                document.getElementById('resultsContainer_2').innerHTML = `
                    <div class="alert alert-danger mt-4">Error: ${error.message}</div>
                `;
            });
    });
</script>

<script>
    document.getElementById('searchForm_3').addEventListener('submit', function (e) {
        e.preventDefault();

        var searchTerm = document.getElementById('SearchTerm_3').value;

        if (!searchTerm.trim()) {
            alert("Please enter a search term.");
            return;
        }

        fetch("api/CompanyDetails/GetDataSourceSearch3?searchTerm=" + searchTerm)
            .then(response => {
                if (!response.ok) {
                    throw new Error('No results found or an error occurred.');
                }
                return response.json();
            })
            .then(data => {
                if (data.length === 0) {
                    document.getElementById('resultsContainer_3').innerHTML = `
                        <div class="alert alert-warning mt-4">No results found for "<strong>${searchTerm}</strong>".</div>
                    `;
                    return;
                }

                let tableHtml = `
                    <h4>Search Results</h4>
                    <table class="table table-striped table-bordered table-hover mt-3">
                        <thead style="background-color: #16253f; color: white">
                            <tr>
                                <th scope="col" onclick="sortTable(0)" style="cursor: pointer">ID</th>
                                <th scope="col" onclick="sortTable(1)" style="cursor: pointer">Company Name</th>
                                <th scope="col">Details</th>
                            </tr>
                        </thead>
                        <tbody>
                `;

                data.forEach((item, index) => {
                    tableHtml += `
                        <tr>
                            <td>${item.id}</td>
                            <td>${item.companyName}</td>
                            <td>
                                <button class="btn btn-info btn-sm" onclick="viewDetails('${item.companyName.replace(/'/g, "\\'")}','DataSource3')">
                                    View Details
                                </button>
                            </td>
                        </tr>`;
                });

                tableHtml += `
                        </tbody>
                    </table>
                `;

                document.getElementById('resultsContainer_3').innerHTML = tableHtml;
                updateCheckboxStates();
            })
            .catch(error => {
                document.getElementById('resultsContainer_3').innerHTML = `
                    <div class="alert alert-danger mt-4">Error: ${error.message}</div>
                `;
            });
    });
</script>

<script>
    document.getElementById('searchForm_5').addEventListener('submit', function (e) {
        e.preventDefault();

        var searchTerm = document.getElementById('SearchTerm_5').value;

        if (!searchTerm.trim()) {
            alert("Please enter a search term.");
            return;
        }

        fetch("api/CompanyDetails/GetDataSourceSearch5?searchTerm=" + searchTerm)
            .then(response => {
                if (!response.ok) {
                    throw new Error('No results found or an error occurred.');
                }
                return response.json();
            })
            .then(data => {
                if (data.length === 0) {
                    document.getElementById('resultsContainer_5').innerHTML = `
                        <div class="alert alert-warning mt-4">No results found for "<strong>${searchTerm}</strong>".</div>
                    `;
                    return;
                }

                let tableHtml = `
                    <h4>Search Results</h4>
                    <table class="table table-striped table-bordered table-hover mt-3">
                        <thead style="background-color: #16253f; color: white">
                            <tr>
                                <th scope="col" onclick="sortTable(0)" style="cursor: pointer">Client Number</th>
                                <th scope="col" onclick="sortTable(1)" style="cursor: pointer">Client Name</th>
                                <th scope="col" onclick="sortTable(2)" style="cursor: pointer">Status</th>
                                <th scope="col" onclick="sortTable(3)" style="cursor: pointer">Open Date</th>
                            </tr>
                        </thead>
                        <tbody>
                `;

                data.forEach((item, index) => {
                    tableHtml += `
                        <tr>
                            <td>${item.clientNumber}</td>
                            <td>${item.clientName}</td>
                            <td>${item.status}</td>
                            <td>${item.openDate}</td>
                        </tr>`;
                });

                tableHtml += `
                        </tbody>
                    </table>
                `;

                document.getElementById('resultsContainer_3').innerHTML = tableHtml;
                updateCheckboxStates();
            })
            .catch(error => {
                document.getElementById('resultsContainer_3').innerHTML = `
                    <div class="alert alert-danger mt-4">Error: ${error.message}</div>
                `;
            });
    });
</script>

<script>
    (function () {
        const form = document.getElementById('searchForm_6');
        const btnDisplayAll = document.getElementById('btnDisplayAll');

        // When "Display All" is clicked, clear fields then submit form
        btnDisplayAll.addEventListener('click', function () {
            document.getElementById('SearchFirstName').value = '';
            document.getElementById('SearchLastName').value = '';
            form.dispatchEvent(new Event('submit', { cancelable: true, bubbles: true }));
        });
    })();
</script>

<script>
    (function () {
        const form = document.getElementById('searchForm_6');
        const resultsEl = document.getElementById('resultsContainer_6');

        if (!form || !resultsEl) return;

        const escapeHtml = (s) => String(s ?? '')
            .replace(/&/g, '&amp;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;')
            .replace(/"/g, '&quot;')
            .replace(/'/g, '&#039;');

        form.addEventListener('submit', async (e) => {
            e.preventDefault();

            const firstName = document.getElementById('SearchFirstName')?.value?.trim() || '';
            const lastName  = document.getElementById('SearchLastName')?.value?.trim() || '';

            let response;

            try {
                response = await fetch('api/CompanyDetails/GetDataSourceSearch6', {
                        method: 'POST',
                        headers: { 'Accept': 'application/json', 'Content-Type': 'application/json' },
                        body: JSON.stringify({ firstName, lastName })
                    })

                if (!response.ok) {
                    const text = await response.text().catch(() => '');
                    throw new Error(text || 'No results found or an error occurred.');
                }

                const data = response.status === 204 ? [] : await response.json();
                const rows = Array.isArray(data) ? data : [];

                if (rows.length === 0) {
                    resultsEl.innerHTML = `
                        <div class="alert alert-warning mt-4">No results found.</div>
                    `;
                    return;
                }

                let tableHtml = `
                    <h4>${firstName || lastName ? 'Search Results' : 'All Contacts'}</h4>
                    <table class="table table-striped table-bordered table-hover mt-3">
                        <thead style="background-color: #16253f; color: white">
                            <tr>
                                <th scope="col" onclick="sortTable(0)" style="cursor: pointer">Company</th>
                                <th scope="col" onclick="sortTable(1)" style="cursor: pointer">Client Matter Number</th>
                                <th scope="col" onclick="sortTable(2)" style="cursor: pointer">Contact First Name</th>
                                <th scope="col" onclick="sortTable(3)" style="cursor: pointer">Contact Last Name</th>
                                <th scope="col" onclick="sortTable(4)" style="cursor: pointer">DLA First Name</th>
                                <th scope="col" onclick="sortTable(5)" style="cursor: pointer">DLA Last Name</th>
                                <th scope="col" onclick="sortTable(6)" style="cursor: pointer">DLA Contact Identity</th>
                            </tr>
                        </thead>
                        <tbody>
                `;

                rows.forEach((item) => {
                    tableHtml += `
                        <tr>
                            <td>${escapeHtml(item.company)}</td>
                            <td>${escapeHtml(item.clientMatterNumber)}</td>
                            <td>${escapeHtml(item.contactFirstName)}</td>
                            <td>${escapeHtml(item.contactLastName)}</td>
                            <td>${escapeHtml(item.dlaFirstName)}</td>
                            <td>${escapeHtml(item.dlaLastName)}</td>
                            <td>${escapeHtml(item.dlaContactIdentity)}</td>
                        </tr>
                    `;
                });

                tableHtml += `</tbody></table>`;
                resultsEl.innerHTML = tableHtml;

                if (typeof updateCheckboxStates === 'function') {
                    updateCheckboxStates();
                }
            } catch (err) {
                resultsEl.innerHTML = `
                    <div class="alert alert-danger mt-4">Error: ${escapeHtml(err.message)}</div>
                `;
            }
        });
    })();
</script>

<script>
    function updateSelectedCompanies(companyName, dataSource, checkbox) {
        let hiddenField = document.getElementById('selectedCompanies');
        let selectedCompanies = JSON.parse(hiddenField.value || "[]");
        companyName = companyName.replace(/'/g, "\\'");

        if (checkbox.checked) {
            // Add the company to the list
            let newCompany = {
                "CompanyName": companyName,
                "DataSource": dataSource,
                "CompanyDetails": true,
                "Professionals": true,
                "Transactions": true
            };

            selectedCompanies.push(newCompany);
        } else {
            // Remove the company from the list
            selectedCompanies = selectedCompanies.filter(company =>
                !(company.CompanyName === companyName && company.DataSource === dataSource)
            );
        }

        // Update the hidden input field with new JSON value
        hiddenField.value = JSON.stringify(selectedCompanies);
    }
</script>

<script>
    function updateCheckboxStates() {
        let hiddenField = document.getElementById('selectedCompanies');
        let selectedCompanies = JSON.parse(hiddenField.value || "[]");

        document.querySelectorAll('.form-check-input').forEach(checkbox => {
            let companyName = checkbox.getAttribute('data-companyname');
            let dataSource = checkbox.getAttribute('data-datasource');
            
            if (companyName && dataSource) {
                let isSelected = selectedCompanies.some(company =>
                    company.CompanyName === companyName && company.DataSource === dataSource
                );

                checkbox.checked = isSelected;
            }
        });
    }
</script>

<style>
    /* Custom table-striped row background color */
    .table-striped tbody tr:nth-of-type(odd) {
        background-color: #E0E0E0 !important;
    }

    .table-striped tbody tr:hover {
        background-color: #d6d6d6 !important;
    }

    .modal-header {
        background-color: #16253f;
        color: white;
    }

    .table th, .table td {
        vertical-align: middle;
        text-align: left;
    }

    strong {
        font-size: 1rem;
    }

    p {
        font-size: 0.95rem;
        color: #555;
    }

    .table th {
        background-color: #16253f !important;
        color: white;
    }

    .nav-tabs .form-check-input {
        margin-top: 5px; /* Adjust vertical alignment */
        margin-left: 10px; /* Add spacing between the last tab and checkbox */
    }
</style>
